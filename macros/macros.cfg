#####################################################################
#   Macros
#####################################################################
[include bedfans.cfg]
[include print.cfg]
[include test_speed.cfg]
[include Smart_Park.cfg]
[include Voron_Purge.cfg]

[gcode_macro _HomingDebug]
gcode:
    {% set message  = params.MSG %}
    {% set debug = printer["gcode_macro _CUSTOM_VARIABLES"].debug|default(False) %}
    {% if debug %}
        { action_respond_info(message) }
    {% endif %}    

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True

[gcode_shell_command generate_shaper_graph_x]
command: /home/pi/printer_data/config/scripts/generate-shaper-graph-x.sh
timeout: 60.
verbose: True

[gcode_shell_command generate_shaper_graph_y]
command: /home/pi/printer_data/config/scripts/generate-shaper-graph-y.sh
timeout: 60.
verbose: True

[gcode_shell_command generate_belt_tension_graph]
command: /home/pi/printer_data/config/scripts/generate-belt-tension-graph.sh
timeout: 90.
verbose: True

[gcode_shell_command change_hostname]
command: /home/pi/printer_data/config/scripts/change-hostname.sh
timeout: 10.

[gcode_macro Disable_Extruder]
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

[gcode_macro PID_Extruder]
gcode:
    {% set name = params.NAME|default(extruder) %}
    {% set temp = params.TEMP|default(250) %}
    PID_CALIBRATE HEATER={name} TARGET={temp} 

[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    M107                                 ; turn print cooling fan off
    SET_FAN_SPEED FAN=Exhaust SPEED=0   ; turn exhaust fan off
    SET_FAN_SPEED FAN=BedFans SPEED=0   ; bed fan off
    SET_PIN PIN=caselight VALUE=0       ; turn case light off

[gcode_macro Middle]
gcode:
    {% set z_rest = printer["gcode_macro _CUSTOM_VARIABLES"].z_rest %}
    {% if printer["gcode_macro _CUSTOM_VARIABLES"].is_kinematic_position_overriden|lower == 'true' %}
    RESPOND MSG="SET_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_KINEMATIC_POSITION outside of debugging purposes."
    G28
    SET_GCODE_VARIABLE MACRO=_CUSTOM_VARIABLES VARIABLE=is_kinematic_position_overriden VALUE=False
  {% else %}
    {% if "xyz" not in printer.toolhead.homed_axes %}
       G28 
    {% endif %}
  {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{z_rest} F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro G32]
gcode:
    {% if printer["gcode_macro _CUSTOM_VARIABLES"].is_kinematic_position_overriden|lower == 'true' %}
    RESPOND MSG="SET_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_KINEMATIC_POSITION outside of debugging purposes."
    G28
    SET_GCODE_VARIABLE MACRO=_CUSTOM_VARIABLES VARIABLE=is_kinematic_position_overriden VALUE=False
    {% endif %}
    SAVE_GCODE_STATE NAME=STATE_G32
    STATUS_HOMING
    G90
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28
    STATUS_READY
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro FORCE_XYZ10]
description: FOR DEBUGGING PURPOSES ONLY. Sets the internal printer kinematic state to 10 on all axes regardless of actual physical position.
gcode:
    {% set z = params.Z|default(10) %}
    {% set y = params.Y|default(10) %}
    {% set x = params.X|default(10) %}
    RESPOND MSG="WARNING: ONLY USE FORCE_XYZ FOR DEBUGGING PURPOSES. YOU'RE OVERRIDING THE INTERNAL POSITIONING STATE OF THE PRINTER. PROCEED WITH CAUTION AND DO A PROPER G28 WHEN DONE."
    SET_GCODE_VARIABLE MACRO=_CUSTOM_VARIABLES VARIABLE=is_kinematic_position_overriden VALUE=True
    SET_KINEMATIC_POSITION Z={z} Y={y} X={x}

#[gcode_macro _CG28]
#description: Helper: Conditional homing
#gcode:
#  {% if printer["gcode_macro _CUSTOM_VARIABLES"].is_kinematic_position_overriden|lower == 'true' %}
#    RESPOND MSG="SET_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_KINEMATIC_POSITION outside of debugging purposes."
#    G28
#    SET_GCODE_VARIABLE MACRO=_CUSTOM_VARIABLES VARIABLE=is_kinematic_position_overriden VALUE=False
#  {% else %}
#    {% if "xyz" not in printer.toolhead.homed_axes %}
#       G28 
#    {% endif %}
#  {% endif %}

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description: Generates resonance graph used to ensure belts are equally tensioned.
gcode:
    TEST_RESONANCES CHIP=rpi AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
    TEST_RESONANCES CHIP=rpi AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
    RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
    RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"

[gcode_macro GENERATE_SHAPER_GRAPHS]
description: Genarates input shaper resonances graphs for analysis. Uses the AXIS parameter for if you only want to do one axis at a time, (eg. GENERATE_SHAPER_GRAPHS AXIS=X)
gcode:
    {% if params.AXIS is defined %}
        {% if params.AXIS|lower == 'x' %}
            MAYBE_HOME
            TEST_RESONANCES CHIP=rpi AXIS=X
            RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
            RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
        {% elif params.AXIS|lower == 'y' %}
            MAYBE_HOME
            TEST_RESONANCES CHIP=rpi AXIS=Y
            RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
            RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
        {% else %}
            {action_raise_error("Unknown axis specified. Expected X or Y.")}
        {% endif %}
    {% else %}
        MAYBE_HOME
        TEST_RESONANCES CHIP=rpi AXIS=X
        TEST_RESONANCES CHIP=rpi AXIS=Y
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
        RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
        RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
    {% endif %}

[gcode_macro CHANGE_HOSTNAME]
description: Change the hostname of your Raspberry Pi.
gcode:
    {% if params.HOSTNAME is not defined %}
        RESPOND MSG='You have to specify a new hostname with the HOSTNAME parameter. Ex: CHANGE_HOSTNAME HOSTNAME="MY_NEW_HOSTNAME"'
        RESPOND MSG="Please note: RFCs mandate that a hostname's labels may contain only the ASCII letters 'a' through 'z' (case-insensitive), the digits '0' through '9', and the hyphen. Hostname labels cannot begin or end with a hyphen. No other symbols, punctuation characters, or blank spaces are permitted."
    {% else %}
        RUN_SHELL_COMMAND CMD=change_hostname PARAMS={params.HOSTNAME}
    {% endif %}

[gcode_macro _CASELIGHT_ON]
description: Helper: Light on
gcode:
  SET_PIN PIN=caselight VALUE=1
  {action_respond_info("Caselight on")}
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light off
gcode:
  SET_PIN PIN=caselight VALUE=0.0
  {action_respond_info("Caselight off")}

[gcode_macro CASELIGHT]
description: Toggle light
gcode: {% if printer['output_pin caselight'].value == 0 %} _CASELIGHT_ON {% else %} _CASELIGHT_OFF {% endif %}

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}